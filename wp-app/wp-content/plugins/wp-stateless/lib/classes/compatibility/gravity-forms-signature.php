<?php
/**
 * Plugin Name: Gravity Forms Signature Add-On
 * Plugin URI: https://www.gravityforms.com/add-ons/signature/
 *
 * Compatibility Description: Enables support for signature images generated by the signature add-on for Gravity Forms.
 *
 */

namespace wpCloud\StatelessMedia {

  if(!class_exists('wpCloud\StatelessMedia\GravityFormSignature')) {

    class GravityFormSignature extends ICompatibility {
      protected $id = 'gravity-form-signature';
      protected $title = 'Gravity Forms Signature Add-On';
      protected $constant = 'WP_STATELESS_COMPATIBILITY_GF_SIG';
      protected $description = 'Enables support for signature images generated by the signature add-on for Gravity Forms.';
      protected $plugin_file = 'gravityformssignature/signature.php';
      protected $plugin_version;

      /**
       * @param $sm
       */
      public function module_init($sm){
        add_filter( 'gform_save_field_value', array($this, 'gform_save_field_value'), 10, 5 );
        add_filter( 'site_url', array($this, 'signature_url'), 10, 4 );
        add_filter( 'gform_signature_delete_file_pre_delete_entry', array($this, 'delete_signature'), 10, 4 );
      }

      /**
       * On gform save field value sync file to GCS and alter the file url to GCS link.
       * @param $value
       * @param $lead
       * @param $field
       * @param $form
       * @param $input_id
       * @return array|false|mixed|string
       */
      public function gform_save_field_value( $value, $lead, $field, $form, $input_id ) {
        if(empty($value)) return $value;

        $type = \GFFormsModel::get_input_type($field);
        if($type == 'signature'){
          /**
           * Compatibility for Signature addon.
           */
          try {
            $folder = \GFSignature::get_signatures_folder();
            $file_path = $folder . $value;

            $name = apply_filters( 'wp_stateless_file_name', $file_path);
            do_action( 'sm:sync::syncFile', $name, $file_path, true);
          } catch (\Throwable $th) {
            //throw $th;
          }
        }
        return $value;
      }

      /**
       * Currently there is no way to fileter signature url. So instead we are filtering site_url function
       * with help of debug backtrace.
       *
       * Also doing sync on the fly for previous entries.
       */
      public function signature_url($url, $path, $scheme, $blog_id){
        try {
          $db = debug_backtrace(false, 7);
          foreach ($db as $key => $value) {
            if($value['function'] == 'get_signature_url' && rgar($value, 'class') == 'GFSignature'){
              $folder = \GFSignature::get_signatures_folder();
              $name = $value['args'][0];
              $file_path = $folder . $name . '.png';
              $name = apply_filters( 'wp_stateless_file_name', $file_path);
              do_action( 'sm:sync::syncFile', $name, $file_path);
              $url = ud_get_stateless_media()->get_gs_host() . '/' . $name;
              break;
            }
          }
        } catch (\Throwable $th) {
          //throw $th;
        }
        return $url;
      }

      /**
       * Deleting signature file from GCS.
       */
      public function delete_signature($return, $form, $lead_id, $field_id){
        try {
          $lead = \RGFormsModel::get_lead( $lead_id );
          $folder = \GFSignature::get_signatures_folder();

          $name = rgar( $lead, $field_id );
          $file_path = $folder . $name;

          $name = apply_filters( 'wp_stateless_file_name', $file_path);
          do_action( 'sm:sync::deleteFile', $name);
        } catch (\Throwable $th) {
          //throw $th;
        }
        return $return;
      }
    }

  }

}